{"ast":null,"code":"var _jsxFileName = \"/Users/chukhanhhh/TMA/src/containers/Identity/Login/Login.jsx\";\n\n/* eslint-disable react/jsx-no-comment-textnodes */\nimport React, { Component } from \"react\";\nimport { formCheckBox, formInput, formSelect } from \"../../../components/form/form\";\nimport style from \"./Login.module.scss\";\nimport log from \"../../img/log.svg\";\nimport * as Yup from \"yup\";\nimport { Formik, Form, useField } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.loginIdentity,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.loginLeft,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.title,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"New Here ?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"If you don't have an account, clicking sign up abow.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.btnSignUp,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"SIGN UP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.footer,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: log,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.loginRight,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.LoginForm,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"SIGN IN\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.LoginFormik,\n            children: /*#__PURE__*/_jsxDEV(Formik, {\n              initialValues: {\n                firstName: \"\",\n                lastName: \"\",\n                email: \"\",\n                acceptedTerms: false,\n                // added for our checkbox\n                jobType: \"\" // added for our select\n\n              },\n              validationSchema: Yup.object({\n                // firstName: Yup.string()\n                //   .max(15, \"Must be 15 characters or less\")\n                //   .required(\"Required\"),\n                // lastName: Yup.string()\n                //   .max(20, \"Must be 20 characters or less\")\n                //   .required(\"Required\"),\n                email: Yup.string().email(\"Invalid email addresss`\").required(\"Required\"),\n                acceptedTerms: Yup.boolean().required(\"Required\").oneOf([true], \"You must accept the terms and conditions.\"),\n                jobType: Yup.string() // specify the set of valid values for job type\n                // @see http://bit.ly/yup-mixed-oneOf\n                .oneOf([\"designer\", \"development\", \"product\", \"other\"], \"Invalid Job Type\").required(\"Required\")\n              }),\n              onSubmit: async (values, {\n                setSubmitting\n              }) => {\n                await new Promise(r => setTimeout(r, 500));\n                setSubmitting(false);\n              },\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                children: /*#__PURE__*/_jsxDEV(\"formInput\", {\n                  label: \"Email Address\",\n                  name: \"email\",\n                  type: \"email\",\n                  placeholder: \"jane@formik.com\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/chukhanhhh/TMA/src/containers/Identity/Login/Login.jsx"],"names":["React","Component","formCheckBox","formInput","formSelect","style","Yup","Formik","Form","useField","Login","render","loginIdentity","loginLeft","title","btnSignUp","footer","log","loginRight","LoginForm","LoginFormik","firstName","lastName","email","acceptedTerms","jobType","object","string","required","boolean","oneOf","values","setSubmitting","Promise","r","setTimeout"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-no-comment-textnodes */\nimport React, { Component } from \"react\";\nimport {\n  formCheckBox,\n  formInput,\n  formSelect,\n} from \"../../../components/form/form\";\nimport style from \"./Login.module.scss\";\nimport log from \"../../img/log.svg\";\nimport * as Yup from \"yup\";\nimport { Formik, Form, useField } from \"formik\";\n\nclass Login extends Component {\n  render() {\n    return (\n      <div className={style.loginIdentity}>\n        <div className={style.loginLeft}>\n          <div className={style.title}>\n            <h1>New Here ?</h1>\n            <h2>If you don't have an account, clicking sign up abow.</h2>\n            <div className={style.btnSignUp}>\n              <button>SIGN UP</button>\n            </div>\n          </div>\n        </div>\n        <div className={style.footer}>\n          <img src={log} alt=\"\" />\n        </div>\n        <div className={style.loginRight}>\n          <div className={style.LoginForm}>\n            <h1>SIGN IN</h1>\n            <div className={style.LoginFormik}>\n              <Formik\n                initialValues={{\n                  firstName: \"\",\n                  lastName: \"\",\n                  email: \"\",\n                  acceptedTerms: false, // added for our checkbox\n                  jobType: \"\", // added for our select\n                }}\n                validationSchema={Yup.object({\n                  // firstName: Yup.string()\n                  //   .max(15, \"Must be 15 characters or less\")\n                  //   .required(\"Required\"),\n                  // lastName: Yup.string()\n                  //   .max(20, \"Must be 20 characters or less\")\n                  //   .required(\"Required\"),\n                  email: Yup.string()\n                    .email(\"Invalid email addresss`\")\n                    .required(\"Required\"),\n                  acceptedTerms: Yup.boolean()\n                    .required(\"Required\")\n                    .oneOf([true], \"You must accept the terms and conditions.\"),\n                  jobType: Yup.string()\n                    // specify the set of valid values for job type\n                    // @see http://bit.ly/yup-mixed-oneOf\n                    .oneOf(\n                      [\"designer\", \"development\", \"product\", \"other\"],\n                      \"Invalid Job Type\"\n                    )\n                    .required(\"Required\"),\n                })}\n                onSubmit={async (values, { setSubmitting }) => {\n                  await new Promise((r) => setTimeout(r, 500));\n                  setSubmitting(false);\n                }}\n              >\n                <Form>\n                  <formInput\n                    label=\"Email Address\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"jane@formik.com\"\n                  />\n                </Form>\n              </Formik>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}